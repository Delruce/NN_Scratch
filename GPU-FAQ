1.Enable GPU support in Miniconda3:
    1. install corresponding GPU driver(s)
    2. run the command:
               conda install -c conda-forge cudatoolkit=11.2 cudnn=8.1.0
       for cuda and cudnn installation
    3. install tensorflow:
               pip install "tensorflow<2.11"
    4. check available GPUs in Python:
               import tensorflow as tf
               tf.config.list_physical_devices('GPU')
    Done
    
2.Run some benchmark test:

# take ResNet18 as example
# credit: d2l

import torch
from torch import nn
from torch.nn import functional as F

class Residual(nn.Module):      # residual block
    def __init__(self, input_channels, num_channels, use_1x1conv=False, strides=1):
        super().__init__()
        
        # residual block consists two convolutional layers:
        self.conv1 = nn.Conv2d(input_channels, num_channels, kernel_size=3, padding=1, stride=strides)
        self.conv2 = nn.Conv2d(num_channels, num_channels, kernel_size=3, padding=1)
        
        # identity:
        if use_1x1conv:
            self.conv3 = nn.Conv2d(input_channels, num_channels, kernel_size=1, stride=strides)
            
        else:
            self.conv3 = None
            
        # two batch normalization layers:
        self.bn1 = nn.BatchNorm2d(num_channels)
        self.bn2 = nn.BatchNorm2d(num_channels)
        
    def forward(self, X):
        Y = F.relu(self.bn1(self.conv1(X)))       # Cb=>
        Y = self.bn2(self.conv2(Y))               # Cb
        if self.conv3:
            X = self.conv3(X)
            
        # add residue to the output
        Y += X
        return F.relu(Y)                          # =>: sum is relu-ed

[in]
blk = Residual(3, 3)                # in_channel: 3, out_channel: 3
X = torch.rand(4, 3, 6, 6)          # 
Y = blk(X)
Y.shape
[out]
torch.Size([4, 3, 6, 6])

[in]
blk = Residual(3, 6, use_1x1conv=True, strides=2)
blk(X).shape
[out]
torch.Size([4, 6, 3, 3])

b1 = nn.Sequential(nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3),    # first block with 7x7 kernel
                   nn.BatchNorm2d(64),
                   nn.ReLU(),
                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
                  )
                  
def resnet_block(input_channels, num_channels, num_residuals, first_block=False)
    blk = []
    for i in range(num_residuals):
        if i==0 and not first_block:
            blk.append(Residual(input_channels, num_channels, use_1x1conv=True, strides=2))
        else:
            blk.append(Residual(num_channels, num_channels))
    return blk
    
b2 = nn.Sequential(*resnet_block(64, 64, 2, first_block=True))
b3 = nn.Sequential(*resnet_block(64, 128, 2))
b4 = nn.Sequential(*resnet_block(128, 256, 2))
b5 = nn.Sequential(*resnet_block(256, 512, 2))

# link blocks together
net = nn.Sequential(b1, b2, b3, b4, b5,
                    nn.AdaptiveAvgPool2d((1, )),
                    nn.Flatten(),
                    nn.Linear(512, 10))
                    
[in]                    
X = torch.rand(size=(1, 1, 224, 224))
for layer in net:
    X = layer(X)
    print(layer.__class__.__name__, 'output shape:\t', X.shape)
[out]    
Sequential output shape:        torch.Size([1, 64, 56, 56])
Sequential output shape:        torch.Size([1, 64, 56, 56])
Sequential output shape:        torch.Size([1, 128, 28, 28])
Sequential output shape:        torch.Size([1, 256, 14, 14])
Sequential output shape:        torch.Size([1, 512, 7, 7])
AdaptiveAvgPool2d output shape: torch.Size([1, 512, 1, 1])
Flatten output shape:           torch.Size([1, 512])
Linear output shape:            torch.Size([1, 10])

# revision required
lr, num_epochs, batch_size = 0.05, 10, 256
train_iter, test_iter = load_data_fashion_mnist(batch_size, resize=96)
train(net, train_iter, test_iter, num_epochs, lr, try_gpu)
